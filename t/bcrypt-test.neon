IMPORT bcrypt

LET test_vectors: Array<Array<String>> := [
    [ "", "$2a$06$DCq7YPn5Rq63x1Lad4cll.", "$2a$06$DCq7YPn5Rq63x1Lad4cll.TV4S6ytwfsfvkgY8jIucDrjc8deX1s." ],
    [ "", "$2a$08$HqWuK6/Ng6sg9gQzbLrgb.", "$2a$08$HqWuK6/Ng6sg9gQzbLrgb.Tl.ZHfXLhvt/SgVyWhQqgqcZ7ZuUtye" ],
    [ "", "$2a$10$k1wbIrmNyFAPwPVPSVa/ze", "$2a$10$k1wbIrmNyFAPwPVPSVa/zecw2BCEnBwVS2GbrmgzxFUOqW9dk4TCW" ],
    [ "", "$2a$12$k42ZFHFWqBp3vWli.nIn8u", "$2a$12$k42ZFHFWqBp3vWli.nIn8uYyIkbvYRvodzbfbK18SSsY.CsIQPlxO" ],
    [ "a", "$2a$06$m0CrhHm10qJ3lXRY.5zDGO", "$2a$06$m0CrhHm10qJ3lXRY.5zDGO3rS2KdeeWLuGmsfGlMfOxih58VYVfxe" ],
    [ "a", "$2a$08$cfcvVd2aQ8CMvoMpP2EBfe", "$2a$08$cfcvVd2aQ8CMvoMpP2EBfeodLEkkFJ9umNEfPD18.hUF62qqlC/V." ],
    [ "a", "$2a$10$k87L/MF28Q673VKh8/cPi.", "$2a$10$k87L/MF28Q673VKh8/cPi.SUl7MU/rWuSiIDDFayrKk/1tBsSQu4u" ],
    [ "a", "$2a$12$8NJH3LsPrANStV6XtBakCe", "$2a$12$8NJH3LsPrANStV6XtBakCez0cKHXVxmvxIlcz785vxAIZrihHZpeS" ],
    [ "abc", "$2a$06$If6bvum7DFjUnE9p2uDeDu", "$2a$06$If6bvum7DFjUnE9p2uDeDu0YHzrHM6tf.iqN8.yx.jNN1ILEf7h0i" ],
    [ "abc", "$2a$08$Ro0CUfOqk6cXEKf3dyaM7O", "$2a$08$Ro0CUfOqk6cXEKf3dyaM7OhSCvnwM9s4wIX9JeLapehKK5YdLxKcm" ],
    [ "abc", "$2a$10$WvvTPHKwdBJ3uk0Z37EMR.", "$2a$10$WvvTPHKwdBJ3uk0Z37EMR.hLA2W6N9AEBhEgrAOljy2Ae5MtaSIUi" ],
    [ "abc", "$2a$12$EXRkfkdmXn2gzds2SSitu.", "$2a$12$EXRkfkdmXn2gzds2SSitu.MW9.gAVqa9eLS1//RYtYCmB1eLHg.9q" ],
    [ "abcdefghijklmnopqrstuvwxyz", "$2a$06$.rCVZVOThsIa97pEDOxvGu", "$2a$06$.rCVZVOThsIa97pEDOxvGuRRgzG64bvtJ0938xuqzv18d3ZpQhstC" ],
    [ "abcdefghijklmnopqrstuvwxyz", "$2a$08$aTsUwsyowQuzRrDqFflhge", "$2a$08$aTsUwsyowQuzRrDqFflhgekJ8d9/7Z3GV3UcgvzQW3J5zMyrTvlz." ],
    [ "abcdefghijklmnopqrstuvwxyz", "$2a$10$fVH8e28OQRj9tqiDXs1e1u", "$2a$10$fVH8e28OQRj9tqiDXs1e1uxpsjN0c7II7YPKXua2NAKYvM6iQk7dq" ],
    [ "abcdefghijklmnopqrstuvwxyz", "$2a$12$D4G5f18o7aMMfwasBL7Gpu", "$2a$12$D4G5f18o7aMMfwasBL7GpuQWuP3pkrZrOAnqP.bmezbMng.QwJ/pG" ],
    [ "~!@#$%^&*()      ~!@#$%^&*()PNBFRD", "$2a$06$fPIsBO8qRqkjj273rfaOI.", "$2a$06$fPIsBO8qRqkjj273rfaOI.HtSV9jLDpTbZn782DC6/t7qT67P6FfO" ],
    [ "~!@#$%^&*()      ~!@#$%^&*()PNBFRD", "$2a$08$Eq2r4G/76Wv39MzSX262hu", "$2a$08$Eq2r4G/76Wv39MzSX262huzPz612MZiYHVUJe/OcOql2jo4.9UxTW" ],
    [ "~!@#$%^&*()      ~!@#$%^&*()PNBFRD", "$2a$10$LgfYWkbzEvQ4JakH7rOvHe", "$2a$10$LgfYWkbzEvQ4JakH7rOvHe0y8pHKF9OaFgwUZ2q7W2FFZmZzJYlfS" ],
    [ "~!@#$%^&*()      ~!@#$%^&*()PNBFRD", "$2a$12$WApznUOJfkEGSmYRfnkrPO", "$2a$12$WApznUOJfkEGSmYRfnkrPOr466oFDCaj4b6HY3EXGvfxm43seyhgC" ],
]

FUNCTION gensalt(n: Number): String
   LET r := bcrypt.gensalt(n)
   CHECK r ISA bcrypt.Result.value ELSE
       EXIT PROCESS FAILURE
   END CHECK
   RETURN r.value
END FUNCTION

FUNCTION hashpw(passwd, salt: String): String
   LET r := bcrypt.hashpw(passwd, salt)
   CHECK r ISA bcrypt.Result.value ELSE
       EXIT PROCESS FAILURE
   END CHECK
   RETURN r.value
END FUNCTION

/*
 * Test method for bcrypt.hashpw(String, String)
 */
FUNCTION testHashpw()
    FOR i := 0 TO test_vectors.size() - 1 DO
        LET plain  := test_vectors[i][0]
        LET salt   := test_vectors[i][1]
        LET expct  := test_vectors[i][2]
        LET hashed := hashpw(plain, salt)
        TESTCASE hashed = expct
    END FOR
END FUNCTION
testHashpw()

/*
 * Test method for bcrypt.gensalt(int)
 */
FUNCTION testGensaltInt()
    FOR i := 4 TO 12 DO
        FOR j := 0 TO test_vectors.size() - 1 DO
            LET plain  := test_vectors[i][0]
            LET salt   := bcrypt.gensalt(i)
            CHECK salt ISA bcrypt.Result.value ELSE
                print("bcrypt.gensalt(\(i)) returned \(salt.error)")
                EXIT PROCESS FAILURE
            END CHECK
            LET hashed1:= bcrypt.hashpw(plain, salt.value)
            CHECK hashed1 ISA bcrypt.Result.value ELSE
                print("bcrypt.hashpw(\"\(plain)\", \"\(salt.value)\") returned \(hashed1.error)")
                EXIT PROCESS FAILURE
            END CHECK
            LET hashed2:= bcrypt.hashpw(plain, hashed1.value)
            CHECK hashed2 ISA bcrypt.Result.value ELSE
                print("bcrypt.hashpw(\"\(plain)\", \"\(hashed1.value)\") returned \(hashed2.error)")
                EXIT PROCESS FAILURE
            END CHECK
            TESTCASE hashed1.value = hashed2.value
        END FOR
    END FOR
END FUNCTION
testGensaltInt()

/*
 * Test method for bcrypt.gensalt()
 */
FUNCTION testGensalt()
    FOR i := 0 TO test_vectors.size() - 1 DO
        LET plain  := test_vectors[i][0]
        LET salt   := bcrypt.gensalt(12)
        CHECK salt ISA bcrypt.Result.value ELSE
            print("bcrypt.gensalt(\(i)) returned \(salt.error)")
            EXIT PROCESS FAILURE
        END CHECK
        LET hashed1:= bcrypt.hashpw(plain, salt.value)
        CHECK hashed1 ISA bcrypt.Result.value ELSE
            print("bcrypt.hashpw(\"\(plain)\", \"\(salt.value)\") returned \(hashed1.error)")
            EXIT PROCESS FAILURE
        END CHECK
        LET hashed2:= bcrypt.hashpw(plain, hashed1.value)
        CHECK hashed2 ISA bcrypt.Result.value ELSE
            print("bcrypt.hashpw(\"\(plain)\", \"\(hashed1.value)\") returned \(hashed2.error)")
            EXIT PROCESS FAILURE
        END CHECK
        TESTCASE hashed1.value = hashed2.value
    END FOR
END FUNCTION
testGensalt()

/*
 * Test method for 'bcrypt.checkpw(String, String)'
 * expecting success
 */
FUNCTION testCheckpw_success()
    FOR i := 0 TO test_vectors.size() - 1 DO
        LET plain  := test_vectors[i][0]
        LET expct  := test_vectors[i][2]
        TESTCASE bcrypt.checkpw(plain, expct)
    END FOR
END FUNCTION
testCheckpw_success()

/*
 * Test method for bcrypt.checkpw(String, String)
 * expecting failure
 */
FUNCTION testCheckpw_failure()
    FOR i := 0 TO test_vectors.size() - 1 DO
        VAR broken_index := (i + 4) MOD test_vectors.size()
        IF broken_index >= test_vectors.size() THEN
            broken_index := 0
        END IF
        LET plain  := test_vectors[i][0]
        LET expct  := test_vectors[broken_index][2]
        TESTCASE bcrypt.checkpw(plain, expct) = FALSE
    END FOR
END FUNCTION
testCheckpw_failure()

/*
 * Test for correct hashing of non-US-ASCII passwords
 */
FUNCTION testInternationalChars()
    LET pw1 := "\u2605\u2605\u2605\u2605\u2605\u2605\u2605\u2605"
    LET pw2 := "????????"
    LET salt:= bcrypt.gensalt(12)
    CHECK salt ISA bcrypt.Result.value ELSE
        print("bcrypt.gensalt(12)) returned \(salt.error)")
        EXIT PROCESS FAILURE
    END CHECK

    LET h1 := bcrypt.hashpw(pw1, salt.value)
    CHECK h1 ISA bcrypt.Result.value ELSE
        print("bcrypt.hashpw(\"\(pw1)\", \"\(salt.value)\") returned \(h1.error)")
        EXIT PROCESS FAILURE
    END CHECK
    TESTCASE bcrypt.checkpw(pw2, h1.value) = FALSE

    LET salt2   := bcrypt.gensalt(12)
    CHECK salt2 ISA bcrypt.Result.value ELSE
        print("bcrypt.gensalt(12)) returned \(salt2.error)")
        EXIT PROCESS FAILURE
    END CHECK

    LET h2 := bcrypt.hashpw(pw2, salt.value)
    CHECK h2 ISA bcrypt.Result.value ELSE
        print("bcrypt.hashpw(\"\(pw2)\", \"\(salt2.value)\") returned \(h2.error)")
        EXIT PROCESS FAILURE
    END CHECK
    TESTCASE bcrypt.checkpw(pw1, h2.value) = FALSE
END FUNCTION
testInternationalChars()
